<?php

namespace BOR\GamificationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use BOR\UserBundle\Entity\User;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * StatisticsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 */
class StatisticsRepository extends EntityRepository
{

    /**
     * Retourne Le nombre d'entrées de la table statistiques.
     *
     * @return integer
     */
    public function getTotalEntities()
    {
        return $this->createQueryBuilder('s')
            ->select("count(s.id)")
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Retourne le classement de l'utilisateur
     *
     * @param User $user
     *
     * @return int
     */
    public function getUserRank($user)
    {
        //Récupération de l'expérence de l'utilisateur
        $userExperience = $this->findOneBy(array("user" => $user))->getExperience();

        //Détermination du ranking : Tous les utilisateurs ayant + d'expérience que lui sont au dessus
        return $this->createQueryBuilder('s')
            ->select("count(s.id)")
            ->where('s.experience > :userExp')
            ->setParameter('userExp', $userExperience)
            ->getQuery()
            ->getSingleScalarResult() + 1;
    }

    /**
     * Retourne le classement avec des limites et paginé
     *
     * @param int $page
     * @param int $limit
     *
     * @return Paginator
     */
    public function getLeaderboard($page=1, $limit=1)
    {
        $qb = $this->createQueryBuilder('s')
            ->orderBy("s.experience", "desc")
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit);

        return new Paginator($qb);
    }
}
